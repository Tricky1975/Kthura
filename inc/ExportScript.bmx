Rem
	Kthura 
	Script Export
	
	
	
	(c) Jeroen P. Broks, 2017, All rights reserved
	
		This program is free software: you can redistribute it and/or modify
		it under the terms of the GNU General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.
		
		This program is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.
		You should have received a copy of the GNU General Public License
		along with this program.  If not, see <http://www.gnu.org/licenses/>.
		
	Exceptions to the standard GNU license are available with Jeroen's written permission given prior 
	to the project the exceptions are needed for.
Version: 17.04.09
End Rem
MKL_Version "Kthura Map System - ExportScript.bmx","17.04.09"
MKL_Lic     "Kthura Map System - ExportScript.bmx","GNU General Public License 3"

Function C_SafeString$(A$)
	Local ret$
	For Local i=0 Until Len A
		If A[i]>=32 Or a[i]<=122 
			ret:+Chr(a[i]) 
		ElseIf Chr(a[i])="~q"
			ret:+"\~q"	
		Else 
			ret:+"\"+a[i]
		EndIf	
	Next
	Return ret
End Function

Function ExportPython()
	editorsave
	Local pyfile$ = RequestFile("Please enter the name of the output Python script:","Python Script:py",True)
	Local BT:TStream = WriteFile(pyfile)
	If Not BT 
		Notify "Creating "+pyfile+" failed"
		Return
	EndIf
	WriteLine bt,"# Generated by the Kthura Map Editor"
	WriteLine bt,"# Generated: "+CurrentDate()+"; "+CurrentTime()+"~n~n"
	WriteLine bt,"# This file has been set up as an import~n~n~n"
	WriteLine bt,"Meta = {}"
	For Local k$ = EachIn MapKeys(kthmap.data)
		WriteLine bt,"Meta[~q"+C_SafeString(k)+"~q] = ~q"+kthmap.data.value(k)+"~q"
	Next
	WriteLine bt,"~n~n~nMapObjects = {}"
	WriteLine bt,"BM_Grid = {}"
	WriteLine bt,"TagMap = {}"
	WriteLine bt,"LabelMap = {}"
	Local KNO = False
	Local multimap = False
	Local defmultimap = False
	Local clayer$
	Local line$
	For Local l$=EachIn Listfile(JCR_B(MapFile,"Objects"))
		line = Trim(l)
		If l And (Not Prefixed(Trim(l),"--"))
			If line="LAYERS" And Not defmultimap
				defmultimap = True
				multimap = True
			ElseIf line="__END" And defmultimap
				defmultimap = False
			ElseIf defmultimap 
				WriteLine bt,"MapObjects[~q"+C_SafeString(line)+"~q] = []"
				WriteLine bt,"LabelMap[~q"+C_SafeString(line)+"~q] = {}"
				WriteLine bt,"TagMap[~q"+C_SafeString(line)+"~q] = {}"
			ElseIf 	line="NEW"
				If (Not multimap) And (Not KNO) 
					clayer = "singlemap"
					WriteLine bt,"MapObjects[~qsinglemap~q] = []"
				EndIf	
			        WriteLine bt,"KNO={}"
				WriteLine bt,"MapObjects[~q"+clayer+"~q].append(KNO)"
			ElseIf Prefixed(line,"LAYER = ")
				clayer = C_SafeString(Trim(Right(line,Len(line)-Len("LAYER = "))))
				WriteLine bt,"~n# "+clayer
			ElseIf Prefixed(line,"BLOCKMAPGRID = ")
				WriteLine BT,"BM_Grid[~q"+clayer+"~q] = ~q"+C_SafeString(Trim(Right(line,Len(line)-Len("BLOCKMAPGRID = "))))+"~q"
			Else
				Local p = line.find("=")
				If p>-1
					Local vr$=Trim(Upper(line[..p]))
					Local vl$=Trim(line[p+1..])
					Select vr
						Case "KIND","TEXTURE","LABELS","TAG"
							WriteLine bt,"KNO[~q"+vr+"~q] = ~q"+C_SafeString(vl)+"~q"
							If vl 
								Select vr
									Case "TAG"
										WriteLine bt,"TagMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q] = KNO"
									Case "LABELS"
										For Local label$=EachIn(vl.split(","))
											WriteLine bt,"if not ~q"+C_SafeString(vl)+"~q in LabelMap[~q"+clayer+"~q]: LabelMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q] = []"
											WriteLine bt,"LabelMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q].append(KNO)"
										Next
								End Select
							EndIf				
						Case "COORD","INSERT","SCALE"
							Local vvl$[]=vl.split(",")
							WriteLine bt,"KNO[~q"+vr+"~q] = { 'x' : "+(vvl[0].toint())+", 'y' : "+(vvl[1].toint())+" } "
						Case "VISIBLE","IMPASSIBLE","FORCEPASSIBLE"
							Local bl$[] = ["False","True"]
							WriteLine bt,"KNO[~q"+vr+"~q] = "+bl[vl.toint()]
						Case "ALPHA"
							WriteLine bt,"KNO[~q"+vr+"~q] = "+(vl.todouble())
						Case "SIZE"		
							Local vvl$[]=vl.split("x")
							WriteLine bt,"KNO[~q"+vr+"~q] = { 'width' : "+(vvl[0].toint())+", 'height' : "+(vvl[1].toint())+" } "
						Case "COLOR"
							Local vvl$[]=vl.split(",")
							WriteLine bt,"KNO[~q"+vr+"~q] = { 'r' : "+(vvl[0].toint())+", 'g' : "+(vvl[1].toint())+", 'b' : "+(vvl[2].toint())+" } "
						Default
							WriteLine bt,"KNO[~q"+vr+"~q] = "+(vl.toint())
					End Select			
									
				EndIf	
			EndIf	
		EndIf
	Next
	CloseFile bt
	Notify "File exported to Python as: ~n"+pyfile
End Function
addcallback callmenu,Hex(1600),ExportPython


Function ExportLua()
	editorsave
	Local luafile$ = RequestFile("Please enter the name of the output Lua script:","Lua Script:lua",True)
	Local BT:TStream = WriteFile(Luafile)
	If Not BT 
		Notify "Creating "+luafile+" failed"
		Return
	EndIf
	WriteLine bt,"--[[ Generated by the Kthura Map Editor"
	WriteLine bt,"     Generated: "+CurrentDate()+"; "+CurrentTime()+"~n~n"
	WriteLine bt,"     This file has been set up as an import~n~n~n"
	WriteLine bt,"]]~n~n~n"
	WriteLine bt,"local Kthura = {}"
	WriteLine bt,"local Meta = {}"
	For Local k$ = EachIn MapKeys(kthmap.data)
		WriteLine bt,"Meta[~q"+C_SafeString(k)+"~q] = ~q"+kthmap.data.value(k)+"~q"
	Next
	WriteLine bt,"~n~n~nlocal MapObjects = {}"
	WriteLine bt,"local BM_Grid = {}"
	WriteLine bt,"local TagMap = {}"
	WriteLine bt,"local LabelMap = {}"
	WriteLine bt,"local KNO"
	WriteLine bt,"Kthura = { MapObjects=MapObjects, Grid=BM_Grid, TagMap = TagMap, LabelMap=LabelMap }"
	Local KNO = False
	Local multimap = False
	Local defmultimap = False
	Local clayer$
	Local line$
	For Local l$=EachIn Listfile(JCR_B(MapFile,"Objects"))
		line = Trim(l)
		If l And (Not Prefixed(Trim(l),"--"))
			If line="LAYERS" And Not defmultimap
				defmultimap = True
				multimap = True
			ElseIf line="__END" And defmultimap
				defmultimap = False
			ElseIf defmultimap 
				WriteLine bt,"MapObjects[~q"+C_SafeString(line)+"~q] = {}"
				WriteLine bt,"LabelMap[~q"+C_SafeString(line)+"~q] = {}"
				WriteLine bt,"TagMap[~q"+C_SafeString(line)+"~q] = {}"
			ElseIf 	line="NEW"
				If (Not multimap) And (Not KNO) 
					clayer = "singlemap"
					WriteLine bt,"MapObjects[~qsinglemap~q] = {}"
				EndIf	
			        WriteLine bt,"~tKNO={}"
				WriteLine bt,"~tMapObjects[~q"+clayer+"~q][#MapObjects[~q"+clayer+"~q]+1] = KNO"
			ElseIf Prefixed(line,"LAYER = ")
				clayer = C_SafeString(Trim(Right(line,Len(line)-Len("LAYER = "))))
				WriteLine bt,"~n-- "+clayer
			ElseIf Prefixed(line,"BLOCKMAPGRID = ")
				WriteLine BT,"~tBM_Grid[~q"+clayer+"~q] = ~q"+C_SafeString(Trim(Right(line,Len(line)-Len("BLOCKMAPGRID = "))))+"~q"
			Else
				Local p = line.find("=")
				If p>-1
					Local vr$=Trim(Upper(line[..p]))
					Local vl$=Trim(line[p+1..])
					Select vr
						Case "KIND","TEXTURE","LABELS","TAG"
							WriteLine bt,"~t~tKNO[~q"+vr+"~q] = ~q"+C_SafeString(vl)+"~q"
							If vl 
								Select vr
									Case "TAG"
										WriteLine bt,"~t~t~tTagMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q] = KNO"
									Case "LABELS"
										For Local label$=EachIn(vl.split(","))
											WriteLine bt,"~t~t~tLabelMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q] = LabelMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q] or {}"
											WriteLine bt,"LabelMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q][#LabelMap[~q"+clayer+"~q][~q"+C_SafeString(vl)+"~q]+1] = KNO"
										Next
								End Select
							EndIf				
						Case "COORD","INSERT","SCALE"
							Local vvl$[]=vl.split(",")
							WriteLine bt,"~t~tKNO[~q"+vr+"~q] = { x = "+(vvl[0].toint())+", y = "+(vvl[1].toint())+" } "
						Case "VISIBLE","IMPASSIBLE","FORCEPASSIBLE"
							Local bl$[] = ["false","true"]
							WriteLine bt,"~t~tKNO[~q"+vr+"~q] = "+bl[vl.toint()]
						Case "ALPHA"
							WriteLine bt,"~t~tKNO[~q"+vr+"~q] = "+(vl.todouble())
						Case "SIZE"		
							Local vvl$[]=vl.split("x")
							WriteLine bt,"~t~tKNO[~q"+vr+"~q] = { width = "+(vvl[0].toint())+", height = "+(vvl[1].toint())+" } "
						Case "COLOR"
							Local vvl$[]=vl.split(",")
							WriteLine bt,"~t~tKNO[~q"+vr+"~q] = { r = "+(vvl[0].toint())+", g = "+(vvl[1].toint())+", b = "+(vvl[2].toint())+" } "
						Default
							WriteLine bt,"~t~tKNO[~q"+vr+"~q] = "+(vl.toint())
					End Select			
									
				EndIf	
			EndIf	
		EndIf
	Next
	WriteLine bt,"~n~n~nreturn Kthura"
	CloseFile bt
	Notify "File exported to Lua as: ~n"+Luafile
End Function
addcallback callmenu,Hex(1601),ExportLua

